<template>
  <div>
    <video ref="videoElement" style="transform: scaleX(-1);" autoplay></video>
    <button @click="startCamera">카메라 시작</button>
    <button @click="startRecording">녹음 시작</button>
    <button @click="stopRecording">녹음 종료</button>
    <audio ref="audioElement" controls></audio>
  </div>
</template>

<script>
import { ref } from 'vue';

export default {
  name: "CameraControl",
  setup() {
    const videoElement = ref(null);
    const audioElement = ref(null);
    let mediaRecorder;
    let audioChunks = [];

    const startCamera = () => {
      if (navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ video: true })
          .then(function(stream) {
            if (videoElement.value) {
              videoElement.value.srcObject = stream;
              console.log("카메라 스트림이 시작되었습니다."); 
              videoElement.value.onloadeddata = () => {
                console.log('비디오 데이터가 로드되었습니다.');
              };
            }
          })
          .catch(function(error) {
            console.log("카메라 접근에 실패했습니다:", error);
          });
      } else {
        console.error("브라우저가 카메라 기능을 지원하지 않습니다.");
      }
    };

    const startRecording = () => {
      if (navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ audio: true })
          .then(function(stream) {
            mediaRecorder = new MediaRecorder(stream);
            mediaRecorder.ondataavailable = function(event) {
              audioChunks.push(event.data);
            };
            mediaRecorder.onstop = function() {
              const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
              const audioUrl = URL.createObjectURL(audioBlob);
              audioElement.value.src = audioUrl;
              audioChunks = [];
            };
            mediaRecorder.start();
            console.log("녹음이 시작되었습니다.");
          })
          .catch(function(error) {
            console.log("오디오 접근에 실패했습니다:", error);
          });
      } else {
        console.error("브라우저가 오디오 기능을 지원하지 않습니다.");
      }
    };

    const stopRecording = () => {
      if (mediaRecorder && mediaRecorder.state === "recording") {
        mediaRecorder.stop();
        console.log("녹음이 종료되었습니다.");
      }
    };

    return {
      videoElement,
      audioElement,
      startCamera,
      startRecording,
      stopRecording
    };
  },
  methods: {}
};
</script>

<style>
</style>











------------------<template>
  <div>
    <video ref="videoPlayer" style="width: 200px; height: 200px;" src="@/assets/audioTest.mp4" controls autoplay></video>
    <button @click="startRecording">Start Recording</button>
    <button @click="stopRecording">Stop Recording</button>
    <a v-if="audioURL" :href="audioURL" download="recording.webm">Download Recording</a>
  </div>
</template>

<script>
export default {
  data() {
    return {
      mediaRecorder: null,
      recordedChunks: [],
      audioURL: null
    };
  },
  methods: {
    async startRecording() {
      const videoElement = this.$refs.videoPlayer;

      if (videoElement.captureStream) {
        try {
          // Get video stream
          const videoStream = videoElement.captureStream();
          
          // Get audio stream from microphone
          const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });

          // Combine video and audio streams
          const combinedStream = new MediaStream();
          videoStream.getTracks().forEach(track => combinedStream.addTrack(track));
          audioStream.getTracks().forEach(track => combinedStream.addTrack(track));

          // Create MediaRecorder with the combined stream
          this.mediaRecorder = new MediaRecorder(combinedStream);

          this.mediaRecorder.ondataavailable = (event) => {
            if (event.data.size > 0) {
              this.recordedChunks.push(event.data);
            }
          };

          this.mediaRecorder.start();
        } catch (err) {
          console.error("Error accessing media devices", err);
        }
      } else {
        console.error("captureStream() not supported.");
      }
    },
    stopRecording() {
      if (this.mediaRecorder) {
        this.mediaRecorder.stop();
        this.mediaRecorder.onstop = () => {
          const blob = new Blob(this.recordedChunks, { type: 'audio/webm' });
          this.audioURL = URL.createObjectURL(blob);
        };
      }
    }
  }
};
</script>

<style>
button {
  display: block;
  margin: 10px 0;
}
</style>
